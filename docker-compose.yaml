services:
  # WordPress DB service (separate for WP)
  mysql_wp:
    image: mariadb:noble
    container_name: mysql_wp
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${WP_ROOT_PASSWORD}
      MYSQL_DATABASE: ${WP_DB_NAME}
      MYSQL_USER: ${WP_DB_USER}
      MYSQL_PASSWORD: ${WP_DB_PASSWORD}
    volumes:
      - wp_db_data:/var/lib/mysql
      - ./db/wp_sql:/docker-entrypoint-initdb.d # Runs init.sql on startup
    networks:
      - app-network
    ports:
      - "${WP_DB_PORT:-3307}:3306"

  phpmyadmin_wp:
    image: phpmyadmin:latest
    container_name: phpmyadmin_wp
    depends_on:
      - mysql_wp
    restart: always
    environment:
      PMA_HOST: mysql_wp
      PMA_PORT: 3306
      PMA_USER: ${WP_DB_USER}
      PMA_PASSWORD: ${WP_DB_PASSWORD}
      PMA_ABSOLUTE_URI: http://localhost:${PMA_WP_PORT:-8081}/
    networks:
      - app-network
    ports:
      - "${PMA_WP_PORT:-8081}:80"

  # CodeIgniter DB service (legacy MySQL 5.7)
  mysql_ci:
    platform: linux/x86_64
    image: mysql:5.7
    container_name: mysql_ci
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${CI_ROOT_PASSWORD}
      MYSQL_DATABASE: ${CI_DB_NAME}
      MYSQL_USER: ${CI_DB_USER}
      MYSQL_PASSWORD: ${CI_DB_PASSWORD}
    volumes:
      - ci_db_data:/var/lib/mysql
      - ./db/ci_sql:/docker-entrypoint-initdb.d
    networks:
      - app-network
    ports:
      - "${CI_DB_PORT:-3308}:3306"

  phpmyadmin_ci:
    image: phpmyadmin:latest
    container_name: phpmyadmin_ci
    depends_on:
      - mysql_ci
    restart: always
    environment:
      PMA_HOST: mysql_ci
      PMA_PORT: 3306
      PMA_USER: ${CI_DB_USER}
      PMA_PASSWORD: ${CI_DB_PASSWORD}
      PMA_ABSOLUTE_URI: http://localhost:${PMA_CI_PORT:-8082}/
    networks:
      - app-network
    ports:
      - "${PMA_CI_PORT:-8082}:80"

  # WordPress Service (for Task 1)
  wordpress:
    image: wordpress:latest
    container_name: wordpress_app
    depends_on:
      - mysql_wp
      - redis
    restart: always
    environment:
      WORDPRESS_DB_HOST: "${WP_DB_HOST}"
      WORDPRESS_DB_USER: "${WP_DB_USER}"
      WORDPRESS_DB_PASSWORD: "${WP_DB_PASSWORD}"
      WORDPRESS_DB_NAME: "${WP_DB_NAME}"
    volumes:
      - ./wordpress/plugins:/var/www/html/wp-content/plugins
     # - ./wordpress:/var/www/html
    networks:
      - app-network
    build:
      context: ./wordpress
    ports:
      - "${WP_PORT:-8010}:80"
      - "9003:9003" # Xdebug port

  codeigniter:
    image: webdevops/php-apache:7.4
    container_name: codeigniter_app
    depends_on:
      - mysql_ci
      - redis
    restart: always
    volumes:
      - ./codeigniter:/app
      - ./codeigniter/docker/httpd/vhost.common.d:/opt/docker/etc/httpd/vhost.common.d:ro
    environment:
      WEB_DOCUMENT_ROOT: /app
      WEB_ENABLE_MOD_REWRITE: "1"
      DB_HOST: ${CI_DB_HOST}
      DB_USER: ${CI_DB_USER}
      DB_PASSWORD: ${CI_DB_PASSWORD}
      DB_NAME: ${CI_DB_NAME}
      API_BEARER_TOKEN: "${CI_API_BEARER_TOKEN}"
      CI_ENV: ${CI_ENV}
      CI_BASE_URL: ${CI_BASE_URL}
      CI_ENVIRONMENT: ${ENVIRONMENT:-production}
    networks:
      - app-network
    ports:
      - "${CI_PORT:-8020}:80"

  # Static Site Server (for Gatsby/Task 2)
  static-site:
    image: nginx:latest
    container_name: static_site
    restart: always
    volumes:
      # Mounts the Gatsby build output directory to be served by Nginx
      - ./static-site/public:/usr/share/nginx/html
    networks:
      - app-network
    ports:
      - "${SITE_PORT:-8000}:80"

  # Redis Shared Cache Service
  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - app-network
    ports:
      - "${REDIS_PORT:-6379}:6379"

# Shared network for all services
networks:
  app-network:
    driver: bridge

# Persistent volumes for data
volumes:
  wp_db_data:
  ci_db_data:
  redis_data: